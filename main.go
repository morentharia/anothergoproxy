package main

import (
	"net/http"
	"os"

	// docs is generated by Swag CLI, you have to import it.

	"github.com/k0kubun/pp"
	"github.com/sirupsen/logrus"

	// gin-swagger middleware
	"github.com/urfave/cli/v2"
)

var proxy *Proxy
var browser *Browser

var options struct {
	ProxyAddr        string `json:"proxy_addr"`
	RestAddr         string `json:"rest_addr"`
	UpstreamProxyURL string `json:"upstream_proxy_url"`
	ControlURL       string `json:"control_url"`
	URLMatch         string `json:"urlmatch"`
	Verbose          bool   `json:"verbose"`
	OutputPath       string `json:"output_path"`
}

var flags []cli.Flag

func init() {
	flags = []cli.Flag{
		&cli.StringFlag{
			Name:        "proxy-addr",
			Value:       "127.0.0.1:8080",
			Usage:       "proxy listen address",
			Destination: &options.ProxyAddr,
		},
		&cli.StringFlag{
			Name:        "rest-addr",
			Value:       "localhost:3333",
			Usage:       "proxy listen address",
			Destination: &options.RestAddr,
		},
		&cli.StringFlag{
			Name:        "upstream",
			Value:       "",
			Usage:       "upstream HTTP Proxy URL (example: http://127.0.0.1:8080)",
			Destination: &options.UpstreamProxyURL,
		},
		// &cli.StringFlag{
		// 	Name:        "chromedp",
		// 	Value:       "",
		// 	Usage:       "chrome controlURL (example: ws://127.0.0.1:9222/devtools/browser/44a6d3d2-3ce3-47b3-872e-80222e729419)",
		// 	Destination: &options.ControlURL,
		// },
		&cli.StringFlag{
			Name:        "urlmatch",
			Value:       "^.*$",
			Usage:       "urls to trace (regexp pattern)",
			Destination: &options.URLMatch,
		},
		&cli.BoolFlag{
			Name:        "verbose",
			Aliases:     []string{"v"},
			Value:       false,
			Usage:       "setting verbose to true will log information on each request sent to the proxy",
			Destination: &options.Verbose,
		},
		&cli.StringFlag{
			Name:        "output path",
			Value:       "/tmp/output",
			Usage:       "path to flash and load cache values",
			Destination: &options.OutputPath,
		},
	}
}

//NOTE: бля domproxy )))) идеальное название
func main() {
	//TODO: add pprof
	app := &cli.App{
		Name:  "chanabolis",
		Flags: flags,
		Action: func(c *cli.Context) error {
			var err error

			logrus.Printf("Config: %s", pp.Sprint(options))

			// DEBUG TODO:
			if false {
				if browser, err = NewBrowser(); err != nil {
					return err
				}
			}

			proxy, err = NewProxy()
			if err != nil {
				logrus.WithError(err).Error("NewProxy")
				return err
			}
			//TODO
			go http.ListenAndServe(options.ProxyAddr, proxy)

			// browser.reloadPageByURL()

			api := NewApi()
			if err := api.Run(options.RestAddr); err != nil {
				return err
			}

			// TODO
			select {}
			return nil
		},
	}
	err := app.Run(os.Args)
	if err != nil {
		logrus.Fatal(err)
	}
}
