package main

import (
	"fmt"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/go-rod/rod/lib/utils"
)

var slash = filepath.FromSlash

func main() {

	build := utils.S(`// generated by running "go generate" on project root
package js
// JS for bypass
const Bypass = {{.Bypass}}
const Underscore = {{.Underscore}}
const Init = {{.Init}}
`,
		"Bypass", encode(fetchBypassJS()),
		"Underscore", encode(jsCodeFile("./js/underscore-min.js")),
		"Init", encode(jsCodeFile("./js/init.js")),
	)

	utils.E(utils.OutputFile(slash("./js/js.go"), build, &utils.OutputFileOptions{
		DirPerm:  0644,
		FilePerm: 0644,
	}))
}

func jsCodeFile(filename string) string {
	code, err := utils.ReadString(filename)
	utils.E(err)

	// since the npx already mentioned extract-stealth-evasions, we don't have to do it again.
	code = regexp.MustCompile(`\A/\*\![\s\S]+?\*/`).ReplaceAllString(code, "")
	return code
}

func fetchBypassJS() string {
	// DEBUG
	// utils.Exec("npx", "extract-stealth-evasions")
	// err := os.Rename("./stealth.min.js", "./js/stealth.min.js")
	// if err != nil {
	// 	log.Fatal(err)
	// }

	code, err := utils.ReadString("./js/stealth.min.js")
	utils.E(err)

	// since the npx already mentioned extract-stealth-evasions, we don't have to do it again.
	code = regexp.MustCompile(`\A/\*\![\s\S]+?\*/`).ReplaceAllString(code, "")

	return fmt.Sprintf(";(() => {\n%s\n})();", code)
}

// not using encoding like base64 or gzip because of they will make git diff every large for small change
func encode(s string) string {
	return "`" + strings.ReplaceAll(s, "`", "` + \"`\" + `") + "`"
}
